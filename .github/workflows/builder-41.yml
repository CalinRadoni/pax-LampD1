name: Build with ESP-IDF v4.1

on: [push]

jobs:
  builder:
    name: Builder for the test project
    runs-on: ubuntu-20.04

    env:
      esp-idf-ver: v4.1

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: main

      - uses: actions/checkout@v2
        with:
          repository: CalinRadoni/ESP32BoardManager
          path: lib/ESP32/ESP32BoardManager

      - uses: actions/checkout@v2
        with:
          repository: CalinRadoni/ESP32DLEDController
          path: lib/ESP32/ESP32DLEDController

      - uses: actions/checkout@v2
        with:
          repository: CalinRadoni/ESP32HAL
          path: lib/ESP32/ESP32HAL

      - uses: actions/checkout@v2
        with:
          repository: CalinRadoni/ESP32RMT
          path: lib/ESP32/ESP32RMT

      - uses: actions/checkout@v2
        with:
          repository: CalinRadoni/ESP32SimpleOTA
          path: lib/ESP32/ESP32SimpleOTA

      - uses: actions/checkout@v2
        with:
          repository: CalinRadoni/ESP32Timers
          path: lib/ESP32/ESP32Timers

      - uses: actions/checkout@v2
        with:
          repository: CalinRadoni/Debouncer
          path: lib/Generic/Debouncer

      - name: Cache the ESP-IDF
        id: cache-esp-idf
        uses: actions/cache@v2
        with:
          path: |
            ~/esp
            ~/.espressif
          key: Ubuntu-20.04_ESP-IDF_${{ env.esp-idf-ver }}

      - name: Install ESP-IDF
        if: steps.cache-esp-idf.outputs.cache-hit != 'true'
        uses: CalinRadoni/esp-idf-v4-action@v2
        with:
          esp_idf_version: ${{ env.esp-idf-ver }}

      - name: Build
        run: |
          source ~/esp/esp-idf/export.sh
          idf.py --version
          export CodeLib_PATH="${{ github.workspace }}/lib"
          cd "${{ github.workspace }}/main/SW"
          echo -e "\n## clean\n"
          if ! idf.py fullclean; then
            rm -rf build
          fi
          echo -e "\n## reconfigure\n"
          idf.py reconfigure > reconfigure.log
          echo -e "\n## build\n"
          idf.py build > build.log
          echo -e "\n## size\n"
          idf.py size
          cat reconfigure.log
          cat build.log
          echo -e "\n${{ github.ref }}\n"

      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
          body: |
            This release is created by the GitHub Actions workflow

      - name: Upload the firmware
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/main/SW/build/pax-LampD1.bin
          asset_name: Firmware-${{ github.ref }}
          asset_content_type: application/octet-stream

      - name: Clean the cache
        run: |
          source ~/esp/esp-idf/export.sh
          cd "${{ github.workspace }}/main/SW"
          if ! idf.py fullclean; then
            rm -rf build
          fi

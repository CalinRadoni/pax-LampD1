name: Build with ESP-IDF v4.1

on: [push]

jobs:
  builder:
    name: Builder for pax-LampD1
    runs-on: ubuntu-20.04

    env:
      esp-idf-ver: v4.1
      project-name: pax-LampD1
      src-path: app/SW

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: app

      - name: Create the code library
        run: |
          mkdir -p "${{ github.workspace }}/lib/ESP32"
          cd "${{ github.workspace }}/lib/ESP32"
          git clone --depth 1 https://github.com/CalinRadoni/ESP32BoardManager.git
          git clone --depth 1 https://github.com/CalinRadoni/ESP32DLEDController.git
          git clone --depth 1 https://github.com/CalinRadoni/ESP32HAL.git
          git clone --depth 1 https://github.com/CalinRadoni/ESP32RMT.git
          git clone --depth 1 https://github.com/CalinRadoni/ESP32SimpleOTA.git
          git clone --depth 1 https://github.com/CalinRadoni/ESP32Timers.git
          mkdir -p "${{ github.workspace }}/lib/Generic"
          cd "${{ github.workspace }}/lib/Generic"
          git clone --depth 1 https://github.com/CalinRadoni/Debouncer.git

      - name: Cache the ESP-IDF
        id: cache-esp-idf
        uses: actions/cache@v2
        with:
          path: |
            ~/esp
            ~/.espressif
          key: ESP-IDF_${{ env.esp-idf-ver }}_on_Ubuntu-20.04

      - name: Install ESP-IDF
        if: steps.cache-esp-idf.outputs.cache-hit != 'true'
        uses: CalinRadoni/esp-idf-v4-action@v2
        with:
          esp_idf_version: ${{ env.esp-idf-ver }}

      - name: Install ninja-build
        if: steps.cache-esp-idf.outputs.cache-hit == 'true'
        run: sudo apt-get install -y ninja-build

      - name: Build
        run: |
          source ~/esp/esp-idf/export.sh
          idf.py --version
          export CodeLib_PATH="${{ github.workspace }}/lib"
          cd "${{ github.workspace }}/${{ env.src-path }}"
          echo -e "\n## reconfigure\n"
          if ! idf.py reconfigure > build.log; then
            cat build.log
          fi
          echo -e "\n## build\n"
          if ! idf.py build >> build.log; then
            cat build.log
          fi
          echo "-----------------------------------------------------"
          cat build.log

      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
          body: |
            This release is created by the GitHub Actions workflow

      - name: Upload the firmware
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.src-path }}/build/${{ env.project-name }}.bin
          asset_name: ${{ env.project-name }}-${{ github.ref }}
          asset_content_type: application/octet-stream
